{"ast":null,"code":"var _jsxFileName = \"/Users/danielcohen/scooter/front/src/pages/Errors.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from '../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Errors = () => {\n  _s();\n\n  const [errorsList, setErrorsList] = useState(null);\n  const [errors, setErrors] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get('/error/all');\n        console.log(response.data);\n        setErrorsList(response.data);\n      } catch (error) {\n        //depends how error is returned, usually I use  a redux error reducer which holds an array of errors\n        setErrors(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errors && errors, errorsList && !errors ? errorsList.map(({\n      type,\n      status\n    }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [type, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), \" \", status]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading Errors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Errors, \"3VweL570eeWnfNuIMeaicTQE7QU=\");\n\n_c = Errors;\nexport default Errors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Errors\");","map":{"version":3,"sources":["/Users/danielcohen/scooter/front/src/pages/Errors.jsx"],"names":["React","useEffect","useState","axios","Errors","errorsList","setErrorsList","errors","setErrors","fetchData","response","get","console","log","data","error","map","type","status","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,cAAlB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeQ,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,YAAV,CAAvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAR,QAAAA,aAAa,CAACI,QAAQ,CAACI,IAAV,CAAb;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACd;AACAP,QAAAA,SAAS,CAACO,KAAD,CAAT;AACD;AACF;;AACDN,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE;AAAA,eACGF,MAAM,IAAIA,MADb,EAEGF,UAAU,IAAI,CAACE,MAAf,GACCF,UAAU,CAACW,GAAX,CAAe,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,EAAmBC,CAAnB,kBACb;AAAA,iBACGF,IADH,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,OAEUC,MAFV;AAAA,OAAUC,CAAV;AAAA;AAAA;AAAA;AAAA,YADF,CADD,gBAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAjCD;;GAAMf,M;;KAAAA,M;AAmCN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../api/index';\n\nconst Errors = () => {\n  const [errorsList, setErrorsList] = useState(null);\n  const [errors, setErrors] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await axios.get('/error/all');\n        console.log(response.data);\n        setErrorsList(response.data);\n      } catch (error) {\n        //depends how error is returned, usually I use  a redux error reducer which holds an array of errors\n        setErrors(error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {errors && errors}\n      {errorsList && !errors ? (\n        errorsList.map(({ type, status }, i) => (\n          <div key={i}>\n            {type}\n            <br /> {status}\n          </div>\n        ))\n      ) : (\n        <span>Loading Errors...</span>\n      )}\n    </div>\n  );\n};\n\nexport default Errors;\n"]},"metadata":{},"sourceType":"module"}